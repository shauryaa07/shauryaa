That error —

Error: Connection terminated unexpectedly

— means your PostgreSQL database connection was lost while your Node.js app (via pg + drizzle-orm) was trying to run a query.

Let’s break down why it happens and how to fix it 👇


---

🧩 1. Root Causes

💥 A. Database was restarted / sleeping / overloaded

If you’re hosting PostgreSQL on Render, Supabase, Neon, or Railway, this happens when:

The database instance sleeps after inactivity.

Render restarts your database or app dyno.

You hit a connection limit and PostgreSQL forcefully drops idle connections.

The query took too long, triggering a timeout or network reset.



---

💥 B. Bad connection pool handling

If you create a new pg.Pool() for every request, it opens too many connections and they die abruptly.

❌ Wrong:

// Bad: creates new pool on every request
app.post("/api/users/upsert", async (req, res) => {
  const pool = new Pool({ connectionString: process.env.DATABASE_URL });
  const db = drizzle(pool);
  await db.insert(users).values(req.body);
});

✅ Correct:

// Good: create pool once globally
import { drizzle } from "drizzle-orm/node-postgres";
import pkg from "pg";
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

export const db = drizzle(pool);

// then use db anywhere


---

💥 C. SSL / Network misconfig

If you’re using Render or a remote DB, SSL must be enabled:

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

Otherwise, PostgreSQL may terminate connections abruptly.


---

💥 D. Long idle connections

If your app holds onto an idle connection for too long, Render (or Postgres) may close it.

Fix by:

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  idleTimeoutMillis: 30000, // 30 seconds
  connectionTimeoutMillis: 5000,
});


---

🧠 2. How to Fix (Checklist)

Step	Action

✅ 1	Make sure the pool is created once, globally (not per request).
✅ 2	Enable ssl: { rejectUnauthorized: false } if using hosted DB.
✅ 3	Add idleTimeoutMillis and connectionTimeoutMillis.
✅ 4	Check Render logs → ensure your Postgres service is running.
✅ 5	If using free tier, wake up DB before first request (Render sleeps free DBs).
✅ 6	Handle database errors gracefully and reconnect if the pool is lost.



---

🧰 Example Fix (for Render + Drizzle)

Here’s a stable setup:

// db.js
import { drizzle } from "drizzle-orm/node-postgres";
import pkg from "pg";
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
});

pool.on("error", (err) => {
  console.error("Unexpected PG error:", err);
});

export const db = drizzle(pool);

Then in your API route:

// routes/users.js
import { db } from "../db.js";
import { users } from "../schema.js";

export async function upsertUser(req, res) {
  try {
    const { id, ...data } = req.body;
    await db.insert(users)
      .values({ id, ...data })
      .onConflictDoUpdate({ target: users.id, set: data });
    res.json({ success: true });
  } catch (err) {
    console.error("Error upserting user:", err);
    res.status(500).json({ error: "Failed to create or get user" });
  }
}


---

If you tell me:

Where your PostgreSQL DB is hosted (Render / Supabase / Neon / local)

and how you’re connecting to it (code snippet from db.js or similar)


…I can give you the exact patch for your setup.